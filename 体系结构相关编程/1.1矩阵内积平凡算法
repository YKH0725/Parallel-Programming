#include <iostream>
#include <chrono>
using namespace std;
const int N = 3500;
#define ull unsigned long long int
ull matrix[N][N];
ull vector[N];

// 计算矩阵每列与给定向量的内积
ull* columnVectorInnerProduct() {
    static ull result[N] = { 0 }; 

    for (int col = 0; col < N; ++col) {
        for (int row = 0; row < N; ++row) {
            result[row] += matrix[row][col] * vector[col];
        }
    }

    return result;
}

int main() {

    for (int i = 0; i < N; ++i) {
        vector[i] = i;
        for (int j = 0; j < N; ++j) {
            matrix[i][j] = i + j; 
        }
    }


    int iterations = 1; 
  
    auto start = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < iterations; ++i) {
        ull* result = columnVectorInnerProduct();
    }

    auto end = std::chrono::high_resolution_clock::now();

    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    std::cout << "1次计算总时间: " << duration.count() << " microseconds" << std::endl;

    return 0;
}
